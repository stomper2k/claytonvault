/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/runtypes/lib/reflect.js
var require_reflect = __commonJS({
  "node_modules/runtypes/lib/reflect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/runtypes/lib/result.js
var require_result = __commonJS({
  "node_modules/runtypes/lib/result.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/runtypes/lib/errors.js
var require_errors = __commonJS({
  "node_modules/runtypes/lib/errors.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError = void 0;
    var ValidationError = function(_super) {
      __extends(ValidationError2, _super);
      function ValidationError2(message, key) {
        var _this = _super.call(this, key ? message + " in " + key : message) || this;
        _this.key = key;
        _this.name = "ValidationError";
        Object.setPrototypeOf(_this, ValidationError2.prototype);
        return _this;
      }
      return ValidationError2;
    }(Error);
    exports.ValidationError = ValidationError;
  }
});

// node_modules/runtypes/lib/contract.js
var require_contract = __commonJS({
  "node_modules/runtypes/lib/contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = void 0;
    var errors_1 = require_errors();
    function Contract() {
      var runtypes = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        runtypes[_i] = arguments[_i];
      }
      var lastIndex = runtypes.length - 1;
      var argTypes = runtypes.slice(0, lastIndex);
      var returnType = runtypes[lastIndex];
      return {
        enforce: function(f2) {
          return function() {
            var args = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              args[_i2] = arguments[_i2];
            }
            if (args.length < argTypes.length)
              throw new errors_1.ValidationError("Expected " + argTypes.length + " arguments but only received " + args.length);
            for (var i = 0; i < argTypes.length; i++)
              argTypes[i].check(args[i]);
            return returnType.check(f2.apply(void 0, args));
          };
        }
      };
    }
    exports.Contract = Contract;
  }
});

// node_modules/runtypes/lib/asynccontract.js
var require_asynccontract = __commonJS({
  "node_modules/runtypes/lib/asynccontract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncContract = void 0;
    var errors_1 = require_errors();
    function AsyncContract() {
      var runtypes = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        runtypes[_i] = arguments[_i];
      }
      var lastIndex = runtypes.length - 1;
      var argTypes = runtypes.slice(0, lastIndex);
      var returnType = runtypes[lastIndex];
      return {
        enforce: function(f2) {
          return function() {
            var args = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              args[_i2] = arguments[_i2];
            }
            if (args.length < argTypes.length)
              throw new errors_1.ValidationError("Expected " + argTypes.length + " arguments but only received " + args.length);
            for (var i = 0; i < argTypes.length; i++)
              argTypes[i].check(args[i]);
            var returnedPromise = f2.apply(void 0, args);
            if (!(returnedPromise instanceof Promise))
              throw new errors_1.ValidationError("Expected function to return a promise, but instead got " + returnedPromise);
            return returnedPromise.then(returnType.check);
          };
        }
      };
    }
    exports.AsyncContract = AsyncContract;
  }
});

// node_modules/runtypes/lib/match.js
var require_match = __commonJS({
  "node_modules/runtypes/lib/match.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.match = void 0;
    function match() {
      var cases = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        cases[_i] = arguments[_i];
      }
      return function(x) {
        for (var _i2 = 0, cases_1 = cases; _i2 < cases_1.length; _i2++) {
          var _a = cases_1[_i2], T = _a[0], f2 = _a[1];
          if (T.guard(x))
            return f2(x);
        }
        throw new Error("No alternatives were matched");
      };
    }
    exports.match = match;
  }
});

// node_modules/runtypes/lib/show.js
var require_show = __commonJS({
  "node_modules/runtypes/lib/show.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var show = function(needsParens, circular) {
      return function(refl) {
        var parenthesize = function(s) {
          return needsParens ? "(" + s + ")" : s;
        };
        if (circular.has(refl)) {
          return parenthesize("CIRCULAR " + refl.tag);
        }
        circular.add(refl);
        try {
          switch (refl.tag) {
            case "unknown":
            case "never":
            case "void":
            case "boolean":
            case "number":
            case "bigint":
            case "string":
            case "symbol":
            case "function":
              return refl.tag;
            case "literal": {
              var value = refl.value;
              return typeof value === "string" ? '"' + value + '"' : String(value);
            }
            case "array":
              return "" + readonlyTag(refl) + show(true, circular)(refl.element) + "[]";
            case "dictionary":
              return "{ [_: " + refl.key + "]: " + show(false, circular)(refl.value) + " }";
            case "record": {
              var keys = Object.keys(refl.fields);
              return keys.length ? "{ " + keys.map(function(k) {
                return "" + readonlyTag(refl) + k + partialTag(refl, k) + ": " + (refl.fields[k].tag === "optional" ? show(false, circular)(refl.fields[k].underlying) : show(false, circular)(refl.fields[k])) + ";";
              }).join(" ") + " }" : "{}";
            }
            case "tuple":
              return "[" + refl.components.map(show(false, circular)).join(", ") + "]";
            case "union":
              return parenthesize("" + refl.alternatives.map(show(true, circular)).join(" | "));
            case "intersect":
              return parenthesize("" + refl.intersectees.map(show(true, circular)).join(" & "));
            case "optional":
              return show(needsParens, circular)(refl.underlying) + " | undefined";
            case "constraint":
              return refl.name || show(needsParens, circular)(refl.underlying);
            case "instanceof":
              var name_1 = refl.ctor.name;
              return "InstanceOf<" + name_1 + ">";
            case "brand":
              return show(needsParens, circular)(refl.entity);
          }
        } finally {
          circular.delete(refl);
        }
        throw Error("impossible");
      };
    };
    exports.default = show(false, new Set());
    function partialTag(_a, key) {
      var isPartial = _a.isPartial, fields = _a.fields;
      return isPartial || key !== void 0 && fields[key].tag === "optional" ? "?" : "";
    }
    function readonlyTag(_a) {
      var isReadonly = _a.isReadonly;
      return isReadonly ? "readonly " : "";
    }
  }
});

// node_modules/runtypes/lib/runtype.js
var require_runtype = __commonJS({
  "node_modules/runtypes/lib/runtype.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.innerValidate = exports.create = void 0;
    var index_1 = require_lib();
    var show_1 = require_show();
    var errors_1 = require_errors();
    function create(validate2, A) {
      A.check = check;
      A.assert = check;
      A._innerValidate = function(value, visited) {
        if (visited.has(value, A))
          return { success: true, value };
        return validate2(value, visited);
      };
      A.validate = function(value) {
        return A._innerValidate(value, VisitedState());
      };
      A.guard = guard;
      A.Or = Or;
      A.And = And;
      A.optional = optional;
      A.withConstraint = withConstraint;
      A.withGuard = withGuard;
      A.withBrand = withBrand;
      A.reflect = A;
      A.toString = function() {
        return "Runtype<" + show_1.default(A) + ">";
      };
      return A;
      function check(x) {
        var validated = A.validate(x);
        if (validated.success) {
          return validated.value;
        }
        throw new errors_1.ValidationError(validated.message, validated.key);
      }
      function guard(x) {
        return A.validate(x).success;
      }
      function Or(B) {
        return index_1.Union(A, B);
      }
      function And(B) {
        return index_1.Intersect(A, B);
      }
      function optional() {
        return index_1.Optional(A);
      }
      function withConstraint(constraint, options) {
        return index_1.Constraint(A, constraint, options);
      }
      function withGuard(guard2, options) {
        return index_1.Constraint(A, guard2, options);
      }
      function withBrand(B) {
        return index_1.Brand(B, A);
      }
    }
    exports.create = create;
    function innerValidate(targetType, value, visited) {
      return targetType._innerValidate(value, visited);
    }
    exports.innerValidate = innerValidate;
    function VisitedState() {
      var members = new WeakMap();
      var add = function(candidate, type) {
        if (candidate === null || !(typeof candidate === "object"))
          return;
        var typeSet = members.get(candidate);
        members.set(candidate, typeSet ? typeSet.set(type, true) : new WeakMap().set(type, true));
      };
      var has = function(candidate, type) {
        var typeSet = members.get(candidate);
        var value = typeSet && typeSet.get(type) || false;
        add(candidate, type);
        return value;
      };
      return { has };
    }
  }
});

// node_modules/runtypes/lib/types/unknown.js
var require_unknown = __commonJS({
  "node_modules/runtypes/lib/types/unknown.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Unknown = void 0;
    var runtype_1 = require_runtype();
    exports.Unknown = runtype_1.create(function(value) {
      return { success: true, value };
    }, { tag: "unknown" });
  }
});

// node_modules/runtypes/lib/types/never.js
var require_never = __commonJS({
  "node_modules/runtypes/lib/types/never.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Never = void 0;
    var runtype_1 = require_runtype();
    exports.Never = runtype_1.create(function(value) {
      return {
        success: false,
        message: "Expected nothing, but was " + (value === null ? value : typeof value)
      };
    }, { tag: "never" });
  }
});

// node_modules/runtypes/lib/types/void.js
var require_void = __commonJS({
  "node_modules/runtypes/lib/types/void.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Void = void 0;
    var unknown_1 = require_unknown();
    exports.Void = unknown_1.Unknown;
  }
});

// node_modules/runtypes/lib/types/literal.js
var require_literal = __commonJS({
  "node_modules/runtypes/lib/types/literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Null = exports.Undefined = exports.Literal = void 0;
    var runtype_1 = require_runtype();
    function literal(value) {
      return Array.isArray(value) ? String(value.map(String)) : typeof value === "bigint" ? String(value) + "n" : String(value);
    }
    function Literal(valueBase) {
      return runtype_1.create(function(value) {
        return value === valueBase ? { success: true, value } : {
          success: false,
          message: "Expected literal '" + literal(valueBase) + "', but was '" + literal(value) + "'"
        };
      }, { tag: "literal", value: valueBase });
    }
    exports.Literal = Literal;
    exports.Undefined = Literal(void 0);
    exports.Null = Literal(null);
  }
});

// node_modules/runtypes/lib/types/boolean.js
var require_boolean = __commonJS({
  "node_modules/runtypes/lib/types/boolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Boolean = void 0;
    var runtype_1 = require_runtype();
    exports.Boolean = runtype_1.create(function(value) {
      return typeof value === "boolean" ? { success: true, value } : {
        success: false,
        message: "Expected boolean, but was " + (value === null ? value : typeof value)
      };
    }, { tag: "boolean" });
  }
});

// node_modules/runtypes/lib/types/number.js
var require_number = __commonJS({
  "node_modules/runtypes/lib/types/number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Number = void 0;
    var runtype_1 = require_runtype();
    exports.Number = runtype_1.create(function(value) {
      return typeof value === "number" ? { success: true, value } : {
        success: false,
        message: "Expected number, but was " + (value === null ? value : typeof value)
      };
    }, { tag: "number" });
  }
});

// node_modules/runtypes/lib/types/bigint.js
var require_bigint = __commonJS({
  "node_modules/runtypes/lib/types/bigint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BigInt = void 0;
    var runtype_1 = require_runtype();
    exports.BigInt = runtype_1.create(function(value) {
      return typeof value === "bigint" ? { success: true, value } : {
        success: false,
        message: "Expected bigint, but was " + (value === null ? value : typeof value)
      };
    }, { tag: "bigint" });
  }
});

// node_modules/runtypes/lib/types/string.js
var require_string = __commonJS({
  "node_modules/runtypes/lib/types/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.String = void 0;
    var runtype_1 = require_runtype();
    exports.String = runtype_1.create(function(value) {
      return typeof value === "string" ? { success: true, value } : {
        success: false,
        message: "Expected string, but was " + (value === null ? value : typeof value)
      };
    }, { tag: "string" });
  }
});

// node_modules/runtypes/lib/types/symbol.js
var require_symbol = __commonJS({
  "node_modules/runtypes/lib/types/symbol.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Symbol = void 0;
    var runtype_1 = require_runtype();
    var f2 = function(key) {
      return runtype_1.create(function(value) {
        if (typeof value !== "symbol") {
          return {
            success: false,
            message: "Expected symbol, but was " + typeStringOf(value)
          };
        } else {
          var keyForValue = global.Symbol.keyFor(value);
          if (keyForValue !== key) {
            return {
              success: false,
              message: "Expected symbol key to be " + quoteIfPresent(key) + ", but was " + quoteIfPresent(keyForValue)
            };
          } else {
            return { success: true, value };
          }
        }
      }, { tag: "symbol", key });
    };
    exports.Symbol = runtype_1.create(function(value) {
      if (typeof value !== "symbol") {
        return {
          success: false,
          message: "Expected symbol, but was " + typeStringOf(value)
        };
      } else {
        return { success: true, value };
      }
    }, Object.assign(f2, { tag: "symbol" }));
    var quoteIfPresent = function(key) {
      return key === void 0 ? "undefined" : '"' + key + '"';
    };
    var typeStringOf = function(value) {
      return value === null ? "null" : Array.isArray(value) ? "array" : typeof value;
    };
  }
});

// node_modules/runtypes/lib/types/array.js
var require_array = __commonJS({
  "node_modules/runtypes/lib/types/array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Array = void 0;
    var runtype_1 = require_runtype();
    function InternalArr(element, isReadonly) {
      return withExtraModifierFuncs(runtype_1.create(function(xs, visited) {
        if (!Array.isArray(xs)) {
          return {
            success: false,
            message: "Expected array, but was " + (xs === null ? xs : typeof xs)
          };
        }
        for (var _i = 0, xs_1 = xs; _i < xs_1.length; _i++) {
          var x = xs_1[_i];
          var validated = runtype_1.innerValidate(element, x, visited);
          if (!validated.success) {
            return {
              success: false,
              message: validated.message,
              key: validated.key ? "[" + xs.indexOf(x) + "]." + validated.key : "[" + xs.indexOf(x) + "]"
            };
          }
        }
        return { success: true, value: xs };
      }, { tag: "array", isReadonly, element }));
    }
    function Arr(element) {
      return InternalArr(element, false);
    }
    exports.Array = Arr;
    function withExtraModifierFuncs(A) {
      A.asReadonly = asReadonly;
      return A;
      function asReadonly() {
        return InternalArr(A.element, true);
      }
    }
  }
});

// node_modules/runtypes/lib/types/tuple.js
var require_tuple = __commonJS({
  "node_modules/runtypes/lib/types/tuple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tuple = void 0;
    var runtype_1 = require_runtype();
    var array_1 = require_array();
    var unknown_1 = require_unknown();
    function Tuple() {
      var components = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
      }
      return runtype_1.create(function(x, visited) {
        var validated = runtype_1.innerValidate(array_1.Array(unknown_1.Unknown), x, visited);
        if (!validated.success) {
          return {
            success: false,
            message: "Expected tuple to be an array:\xA0" + validated.message,
            key: validated.key
          };
        }
        if (validated.value.length !== components.length) {
          return {
            success: false,
            message: "Expected an array of length " + components.length + ", but was " + validated.value.length
          };
        }
        for (var i = 0; i < components.length; i++) {
          var validatedComponent = runtype_1.innerValidate(components[i], validated.value[i], visited);
          if (!validatedComponent.success) {
            return {
              success: false,
              message: validatedComponent.message,
              key: validatedComponent.key ? "[" + i + "]." + validatedComponent.key : "[" + i + "]"
            };
          }
        }
        return { success: true, value: x };
      }, { tag: "tuple", components });
    }
    exports.Tuple = Tuple;
  }
});

// node_modules/runtypes/lib/util.js
var require_util = __commonJS({
  "node_modules/runtypes/lib/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasKey = void 0;
    function hasKey(k, o) {
      return typeof o === "object" && k in o;
    }
    exports.hasKey = hasKey;
  }
});

// node_modules/runtypes/lib/types/record.js
var require_record = __commonJS({
  "node_modules/runtypes/lib/types/record.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Partial = exports.Record = exports.InternalRecord = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var show_1 = require_show();
    function InternalRecord(fields, isPartial, isReadonly) {
      return withExtraModifierFuncs(runtype_1.create(function(x, visited) {
        if (x === null || x === void 0) {
          var a = runtype_1.create(function(_x) {
            return { success: true, value: _x };
          }, { tag: "record", fields });
          return { success: false, message: "Expected " + show_1.default(a) + ", but was " + x };
        }
        for (var key in fields) {
          var isOptional = isPartial || fields[key].reflect.tag === "optional";
          if (util_1.hasKey(key, x)) {
            if (isOptional && x[key] === void 0)
              continue;
            var validated = runtype_1.innerValidate(fields[key], x[key], visited);
            if (!validated.success) {
              return {
                success: false,
                message: validated.message,
                key: validated.key ? key + "." + validated.key : key
              };
            }
          } else if (!isOptional) {
            return {
              success: false,
              message: 'Expected "' + key + '" property to be present, but was missing',
              key
            };
          }
        }
        return { success: true, value: x };
      }, { tag: "record", isPartial, isReadonly, fields }));
    }
    exports.InternalRecord = InternalRecord;
    function Record(fields) {
      return InternalRecord(fields, false, false);
    }
    exports.Record = Record;
    function Partial(fields) {
      return InternalRecord(fields, true, false);
    }
    exports.Partial = Partial;
    function withExtraModifierFuncs(A) {
      A.asPartial = asPartial;
      A.asReadonly = asReadonly;
      return A;
      function asPartial() {
        return InternalRecord(A.fields, true, A.isReadonly);
      }
      function asReadonly() {
        return InternalRecord(A.fields, A.isPartial, true);
      }
    }
  }
});

// node_modules/runtypes/lib/types/constraint.js
var require_constraint = __commonJS({
  "node_modules/runtypes/lib/types/constraint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Guard = exports.Constraint = void 0;
    var runtype_1 = require_runtype();
    var string_1 = require_string();
    var unknown_1 = require_unknown();
    function Constraint(underlying, constraint, options) {
      return runtype_1.create(function(value) {
        var name = options && options.name;
        var validated = underlying.validate(value);
        if (!validated.success) {
          return validated;
        }
        var result = constraint(validated.value);
        if (string_1.String.guard(result))
          return { success: false, message: result };
        else if (!result)
          return { success: false, message: "Failed " + (name || "constraint") + " check" };
        return { success: true, value: validated.value };
      }, {
        tag: "constraint",
        underlying,
        constraint,
        name: options && options.name,
        args: options && options.args
      });
    }
    exports.Constraint = Constraint;
    var Guard = function(guard, options) {
      return unknown_1.Unknown.withGuard(guard, options);
    };
    exports.Guard = Guard;
  }
});

// node_modules/runtypes/lib/types/dictionary.js
var require_dictionary = __commonJS({
  "node_modules/runtypes/lib/types/dictionary.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Dictionary = void 0;
    var runtype_1 = require_runtype();
    var string_1 = require_string();
    var constraint_1 = require_constraint();
    var show_1 = require_show();
    var NumberKey = constraint_1.Constraint(string_1.String, function(s) {
      return !isNaN(+s);
    }, { name: "number" });
    function Dictionary(value, key) {
      var keyRuntype = key === void 0 ? string_1.String : key === "string" ? string_1.String : key === "number" ? NumberKey : key;
      var keyString = show_1.default(keyRuntype);
      return runtype_1.create(function(x, visited) {
        if (x === null || x === void 0) {
          var a = runtype_1.create(x, { tag: "dictionary", key: keyString, value });
          return { success: false, message: "Expected " + show_1.default(a) + ", but was " + x };
        }
        if (typeof x !== "object") {
          var a = runtype_1.create(x, { tag: "dictionary", key: keyString, value });
          return { success: false, message: "Expected " + show_1.default(a.reflect) + ", but was " + typeof x };
        }
        if (Object.getPrototypeOf(x) !== Object.prototype) {
          if (!Array.isArray(x)) {
            var a = runtype_1.create(x, { tag: "dictionary", key: keyString, value });
            return {
              success: false,
              message: "Expected " + show_1.default(a.reflect) + ", but was " + Object.getPrototypeOf(x)
            };
          } else if (keyString === "string")
            return { success: false, message: "Expected dictionary, but was array" };
        }
        var numberString = /^(?:NaN|-?\d+(?:\.\d+)?)$/u;
        for (var _i = 0, _a = __spreadArray(__spreadArray([], Object.getOwnPropertyNames(x)), Object.getOwnPropertySymbols(x)); _i < _a.length; _i++) {
          var k = _a[_i];
          var isNumberLikeKey = typeof k === "string" && numberString.test(k);
          var l = isNumberLikeKey ? global.Number(k) : k;
          if (isNumberLikeKey ? !keyRuntype.guard(l) && !keyRuntype.guard(k) : !keyRuntype.guard(l)) {
            return {
              success: false,
              message: "Expected dictionary key to be a " + keyString + ", but was " + typeof l
            };
          }
          var validated = runtype_1.innerValidate(value, x[k], visited);
          if (!validated.success) {
            return {
              success: false,
              message: validated.message,
              key: validated.key ? global.String(k) + "." + validated.key : global.String(k)
            };
          }
        }
        return { success: true, value: x };
      }, { tag: "dictionary", key: keyString, value });
    }
    exports.Dictionary = Dictionary;
  }
});

// node_modules/runtypes/lib/types/union.js
var require_union = __commonJS({
  "node_modules/runtypes/lib/types/union.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Union = void 0;
    var runtype_1 = require_runtype();
    var show_1 = require_show();
    var util_1 = require_util();
    function Union() {
      var alternatives = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        alternatives[_i] = arguments[_i];
      }
      var match = function() {
        var cases = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          cases[_i2] = arguments[_i2];
        }
        return function(x) {
          for (var i = 0; i < alternatives.length; i++) {
            if (alternatives[i].guard(x)) {
              return cases[i](x);
            }
          }
        };
      };
      return runtype_1.create(function(value, visited) {
        var commonLiteralFields = {};
        for (var _i2 = 0, alternatives_1 = alternatives; _i2 < alternatives_1.length; _i2++) {
          var alternative = alternatives_1[_i2];
          if (alternative.reflect.tag === "record") {
            var _loop_1 = function(fieldName2) {
              var field2 = alternative.reflect.fields[fieldName2];
              if (field2.tag === "literal") {
                if (commonLiteralFields[fieldName2]) {
                  if (commonLiteralFields[fieldName2].every(function(value2) {
                    return value2 !== field2.value;
                  })) {
                    commonLiteralFields[fieldName2].push(field2.value);
                  }
                } else {
                  commonLiteralFields[fieldName2] = [field2.value];
                }
              }
            };
            for (var fieldName in alternative.reflect.fields) {
              _loop_1(fieldName);
            }
          }
        }
        for (var fieldName in commonLiteralFields) {
          if (commonLiteralFields[fieldName].length === alternatives.length) {
            for (var _a = 0, alternatives_2 = alternatives; _a < alternatives_2.length; _a++) {
              var alternative = alternatives_2[_a];
              if (alternative.reflect.tag === "record") {
                var field = alternative.reflect.fields[fieldName];
                if (field.tag === "literal" && util_1.hasKey(fieldName, value) && value[fieldName] === field.value) {
                  return runtype_1.innerValidate(alternative, value, visited);
                }
              }
            }
          }
        }
        for (var _b = 0, alternatives_3 = alternatives; _b < alternatives_3.length; _b++) {
          var targetType = alternatives_3[_b];
          if (runtype_1.innerValidate(targetType, value, visited).success) {
            return { success: true, value };
          }
        }
        var a = runtype_1.create(value, { tag: "union", alternatives });
        return {
          success: false,
          message: "Expected " + show_1.default(a) + ", but was " + (value === null ? value : typeof value)
        };
      }, { tag: "union", alternatives, match });
    }
    exports.Union = Union;
  }
});

// node_modules/runtypes/lib/types/intersect.js
var require_intersect = __commonJS({
  "node_modules/runtypes/lib/types/intersect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Intersect = void 0;
    var runtype_1 = require_runtype();
    function Intersect() {
      var intersectees = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        intersectees[_i] = arguments[_i];
      }
      return runtype_1.create(function(value, visited) {
        for (var _i2 = 0, intersectees_1 = intersectees; _i2 < intersectees_1.length; _i2++) {
          var targetType = intersectees_1[_i2];
          var validated = runtype_1.innerValidate(targetType, value, visited);
          if (!validated.success) {
            return validated;
          }
        }
        return { success: true, value };
      }, { tag: "intersect", intersectees });
    }
    exports.Intersect = Intersect;
  }
});

// node_modules/runtypes/lib/types/optional.js
var require_optional = __commonJS({
  "node_modules/runtypes/lib/types/optional.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Optional = void 0;
    var runtype_1 = require_runtype();
    function Optional(runtype) {
      return runtype_1.create(function(value) {
        return value === void 0 ? { success: true, value } : runtype.validate(value);
      }, { tag: "optional", underlying: runtype });
    }
    exports.Optional = Optional;
  }
});

// node_modules/runtypes/lib/types/function.js
var require_function = __commonJS({
  "node_modules/runtypes/lib/types/function.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Function = void 0;
    var runtype_1 = require_runtype();
    exports.Function = runtype_1.create(function(value) {
      return typeof value === "function" ? { success: true, value } : {
        success: false,
        message: "Expected function, but was " + (value === null ? value : typeof value)
      };
    }, { tag: "function" });
  }
});

// node_modules/runtypes/lib/types/instanceof.js
var require_instanceof = __commonJS({
  "node_modules/runtypes/lib/types/instanceof.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InstanceOf = void 0;
    var runtype_1 = require_runtype();
    function InstanceOf(ctor) {
      return runtype_1.create(function(value) {
        return value instanceof ctor ? { success: true, value } : {
          success: false,
          message: "Expected " + ctor.name + ", but was " + (value === null ? value : typeof value)
        };
      }, { tag: "instanceof", ctor });
    }
    exports.InstanceOf = InstanceOf;
  }
});

// node_modules/runtypes/lib/types/lazy.js
var require_lazy = __commonJS({
  "node_modules/runtypes/lib/types/lazy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lazy = void 0;
    var runtype_1 = require_runtype();
    function Lazy(delayed) {
      var data = {
        get tag() {
          return getWrapped()["tag"];
        }
      };
      var cached;
      function getWrapped() {
        if (!cached) {
          cached = delayed();
          for (var k in cached)
            if (k !== "tag")
              data[k] = cached[k];
        }
        return cached;
      }
      return runtype_1.create(function(x) {
        return getWrapped().validate(x);
      }, data);
    }
    exports.Lazy = Lazy;
  }
});

// node_modules/runtypes/lib/types/brand.js
var require_brand = __commonJS({
  "node_modules/runtypes/lib/types/brand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Brand = void 0;
    var runtype_1 = require_runtype();
    function Brand(brand, entity) {
      return runtype_1.create(function(value) {
        var validated = entity.validate(value);
        return validated.success ? { success: true, value: validated.value } : validated;
      }, {
        tag: "brand",
        brand,
        entity
      });
    }
    exports.Brand = Brand;
  }
});

// node_modules/runtypes/lib/decorator.js
var require_decorator = __commonJS({
  "node_modules/runtypes/lib/decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checked = exports.check = void 0;
    var errors_1 = require_errors();
    var prototypes = new WeakMap();
    function check(target, propertyKey, parameterIndex) {
      var prototype = prototypes.get(target) || new Map();
      prototypes.set(target, prototype);
      var validParameterIndices = prototype.get(propertyKey) || [];
      prototype.set(propertyKey, validParameterIndices);
      validParameterIndices.push(parameterIndex);
    }
    exports.check = check;
    function getValidParameterIndices(target, propertyKey, runtypeCount) {
      var prototype = prototypes.get(target);
      var validParameterIndices = prototype && prototype.get(propertyKey);
      if (validParameterIndices) {
        return validParameterIndices;
      }
      var indices = [];
      for (var i = 0; i < runtypeCount; i++) {
        indices.push(i);
      }
      return indices;
    }
    function checked() {
      var runtypes = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        runtypes[_i] = arguments[_i];
      }
      if (runtypes.length === 0) {
        throw new Error("No runtype provided to `@checked`. Please remove the decorator.");
      }
      return function(target, propertyKey, descriptor) {
        var method = descriptor.value;
        var methodId = (target.name || target.constructor.name + ".prototype") + (typeof propertyKey === "string" ? '["' + propertyKey + '"]' : "[" + String(propertyKey) + "]");
        var validParameterIndices = getValidParameterIndices(target, propertyKey, runtypes.length);
        if (validParameterIndices.length !== runtypes.length) {
          throw new Error("Number of `@checked` runtypes and @check parameters not matched.");
        }
        if (validParameterIndices.length > method.length) {
          throw new Error("Number of `@checked` runtypes exceeds actual parameter length.");
        }
        descriptor.value = function() {
          var args = [];
          for (var _i2 = 0; _i2 < arguments.length; _i2++) {
            args[_i2] = arguments[_i2];
          }
          runtypes.forEach(function(type, typeIndex) {
            var parameterIndex = validParameterIndices[typeIndex];
            var validated = type.validate(args[parameterIndex]);
            if (!validated.success) {
              throw new errors_1.ValidationError(methodId + ", argument #" + parameterIndex + ": " + validated.message, validated.key);
            }
          });
          return method.apply(this, args);
        };
      };
    }
    exports.checked = checked;
  }
});

// node_modules/runtypes/lib/index.js
var require_lib = __commonJS({
  "node_modules/runtypes/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InstanceOf = exports.Null = exports.Undefined = exports.Literal = void 0;
    __exportStar(require_reflect(), exports);
    __exportStar(require_result(), exports);
    __exportStar(require_contract(), exports);
    __exportStar(require_asynccontract(), exports);
    __exportStar(require_match(), exports);
    __exportStar(require_errors(), exports);
    __exportStar(require_unknown(), exports);
    __exportStar(require_never(), exports);
    __exportStar(require_void(), exports);
    var literal_1 = require_literal();
    Object.defineProperty(exports, "Literal", { enumerable: true, get: function() {
      return literal_1.Literal;
    } });
    Object.defineProperty(exports, "Undefined", { enumerable: true, get: function() {
      return literal_1.Undefined;
    } });
    Object.defineProperty(exports, "Null", { enumerable: true, get: function() {
      return literal_1.Null;
    } });
    __exportStar(require_boolean(), exports);
    __exportStar(require_number(), exports);
    __exportStar(require_bigint(), exports);
    __exportStar(require_string(), exports);
    __exportStar(require_symbol(), exports);
    __exportStar(require_array(), exports);
    __exportStar(require_tuple(), exports);
    __exportStar(require_record(), exports);
    __exportStar(require_dictionary(), exports);
    __exportStar(require_union(), exports);
    __exportStar(require_intersect(), exports);
    __exportStar(require_optional(), exports);
    __exportStar(require_function(), exports);
    var instanceof_1 = require_instanceof();
    Object.defineProperty(exports, "InstanceOf", { enumerable: true, get: function() {
      return instanceof_1.InstanceOf;
    } });
    __exportStar(require_lazy(), exports);
    __exportStar(require_constraint(), exports);
    __exportStar(require_brand(), exports);
    __exportStar(require_decorator(), exports);
  }
});

// node_modules/@doist/todoist-api-typescript/dist/types/entities.js
var require_entities = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/types/entities.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.User = exports.Comment = exports.Attachment = exports.Label = exports.Section = exports.Project = exports.Task = exports.DueDate = exports.Int = void 0;
    var runtypes_1 = require_lib();
    exports.Int = runtypes_1.Number.withConstraint(function(n) {
      return Number.isInteger(n) || n + " is not a valid entity id. Should be an integer";
    });
    exports.DueDate = (0, runtypes_1.Record)({
      recurring: runtypes_1.Boolean,
      string: runtypes_1.String,
      date: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      datetime: runtypes_1.String,
      timezone: runtypes_1.String
    }));
    exports.Task = (0, runtypes_1.Record)({
      id: exports.Int,
      order: exports.Int,
      content: runtypes_1.String,
      description: runtypes_1.String,
      projectId: exports.Int,
      sectionId: exports.Int,
      completed: runtypes_1.Boolean,
      labelIds: (0, runtypes_1.Array)(exports.Int),
      priority: exports.Int,
      commentCount: exports.Int,
      created: runtypes_1.String,
      url: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      parentId: exports.Int,
      due: exports.DueDate,
      assignee: exports.Int
    }));
    exports.Project = (0, runtypes_1.Record)({
      id: exports.Int,
      name: runtypes_1.String,
      color: exports.Int,
      commentCount: exports.Int,
      shared: runtypes_1.Boolean,
      favorite: runtypes_1.Boolean,
      url: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      parentId: exports.Int,
      order: exports.Int,
      inboxProject: runtypes_1.Boolean,
      teamInbox: runtypes_1.Boolean,
      syncId: exports.Int
    }));
    exports.Section = (0, runtypes_1.Record)({
      id: exports.Int,
      order: exports.Int,
      name: runtypes_1.String,
      projectId: exports.Int
    });
    exports.Label = (0, runtypes_1.Record)({
      id: exports.Int,
      order: exports.Int,
      name: runtypes_1.String,
      color: exports.Int,
      favorite: runtypes_1.Boolean
    });
    exports.Attachment = (0, runtypes_1.Record)({
      resourceType: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      fileName: runtypes_1.String,
      fileSize: exports.Int,
      fileType: runtypes_1.String,
      fileUrl: runtypes_1.String,
      fileDuration: exports.Int,
      uploadState: (0, runtypes_1.Union)((0, runtypes_1.Literal)("pending"), (0, runtypes_1.Literal)("completed")),
      image: runtypes_1.String,
      imageWidth: exports.Int,
      imageHeight: exports.Int,
      url: runtypes_1.String,
      title: runtypes_1.String
    }));
    exports.Comment = (0, runtypes_1.Record)({
      id: exports.Int,
      content: runtypes_1.String,
      posted: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      taskId: exports.Int,
      projectId: exports.Int,
      attachment: exports.Attachment
    }));
    exports.User = (0, runtypes_1.Record)({
      id: exports.Int,
      name: runtypes_1.String,
      email: runtypes_1.String
    });
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module2) {
    "use strict";
    module2.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(resolve, reject, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults.headers = {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = ["url", "method", "data"];
      var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
      var defaultToConfig2Keys = [
        "baseURL",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "timeoutMessage",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "decompress",
        "maxContentLength",
        "maxBodyLength",
        "maxRedirects",
        "transport",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath",
        "responseEncoding"
      ];
      var directMergeKeys = ["validateStatus"];
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      }
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils.forEach(otherKeys, mergeDeepProperties);
      return config;
    };
  }
});

// node_modules/axios/package.json
var require_package = __commonJS({
  "node_modules/axios/package.json"(exports, module2) {
    module2.exports = {
      name: "axios",
      version: "0.21.4",
      description: "Promise based HTTP client for the browser and node.js",
      main: "index.js",
      scripts: {
        test: "grunt test",
        start: "node ./sandbox/server.js",
        build: "NODE_ENV=production grunt build",
        preversion: "npm test",
        version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
        postversion: "git push && git push --tags",
        examples: "node ./examples/server.js",
        coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
        fix: "eslint --fix lib/**/*.js"
      },
      repository: {
        type: "git",
        url: "https://github.com/axios/axios.git"
      },
      keywords: [
        "xhr",
        "http",
        "ajax",
        "promise",
        "node"
      ],
      author: "Matt Zabriskie",
      license: "MIT",
      bugs: {
        url: "https://github.com/axios/axios/issues"
      },
      homepage: "https://axios-http.com",
      devDependencies: {
        coveralls: "^3.0.0",
        "es6-promise": "^4.2.4",
        grunt: "^1.3.0",
        "grunt-banner": "^0.6.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-clean": "^1.1.0",
        "grunt-contrib-watch": "^1.0.0",
        "grunt-eslint": "^23.0.0",
        "grunt-karma": "^4.0.0",
        "grunt-mocha-test": "^0.13.3",
        "grunt-ts": "^6.0.0-beta.19",
        "grunt-webpack": "^4.0.2",
        "istanbul-instrumenter-loader": "^1.0.0",
        "jasmine-core": "^2.4.1",
        karma: "^6.3.2",
        "karma-chrome-launcher": "^3.1.0",
        "karma-firefox-launcher": "^2.1.0",
        "karma-jasmine": "^1.1.1",
        "karma-jasmine-ajax": "^0.1.13",
        "karma-safari-launcher": "^1.0.0",
        "karma-sauce-launcher": "^4.3.6",
        "karma-sinon": "^1.0.5",
        "karma-sourcemap-loader": "^0.3.8",
        "karma-webpack": "^4.0.2",
        "load-grunt-tasks": "^3.5.2",
        minimist: "^1.2.0",
        mocha: "^8.2.1",
        sinon: "^4.5.0",
        "terser-webpack-plugin": "^4.2.3",
        typescript: "^4.0.5",
        "url-search-params": "^0.10.0",
        webpack: "^4.44.2",
        "webpack-dev-server": "^3.11.0"
      },
      browser: {
        "./lib/adapters/http.js": "./lib/adapters/xhr.js"
      },
      jsdelivr: "dist/axios.min.js",
      unpkg: "dist/axios.min.js",
      typings: "./index.d.ts",
      dependencies: {
        "follow-redirects": "^1.14.0"
      },
      bundlesize: [
        {
          path: "./dist/axios.min.js",
          threshold: "5kB"
        }
      ]
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module2) {
    "use strict";
    var pkg = require_package();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    var currentVerArr = pkg.version.split(".");
    function isOlderVersion(version2, thanVersion) {
      var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
      var destVer = version2.split(".");
      for (var i = 0; i < 3; i++) {
        if (pkgVersionArr[i] > destVer[i]) {
          return true;
        } else if (pkgVersionArr[i] < destVer[i]) {
          return false;
        }
      }
      return false;
    }
    validators.transitional = function transitional(validator, version2, message) {
      var isDeprecated = version2 && isOlderVersion(version2);
      function formatMessage(opt, desc) {
        return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed in " + version2));
        }
        if (isDeprecated && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version2 + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module2.exports = {
      isOlderVersion,
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
          forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
          clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    module2.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios.defaults, instanceConfig));
    };
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module2.exports = axios;
    module2.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f2, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f2 = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v) {
          if (f2(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f2) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
          } : f2;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f2) {
        if (kind === "a" && !f2)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f2) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f2)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/lower-case/dist/index.js
var require_dist = __commonJS({
  "node_modules/lower-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lowerCase = exports.localeLowerCase = void 0;
    var SUPPORTED_LOCALE = {
      tr: {
        regexp: /\u0130|\u0049|\u0049\u0307/g,
        map: {
          \u0130: "i",
          I: "\u0131",
          I\u0307: "i"
        }
      },
      az: {
        regexp: /\u0130/g,
        map: {
          \u0130: "i",
          I: "\u0131",
          I\u0307: "i"
        }
      },
      lt: {
        regexp: /\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,
        map: {
          I: "i\u0307",
          J: "j\u0307",
          \u012E: "\u012F\u0307",
          \u00CC: "i\u0307\u0300",
          \u00CD: "i\u0307\u0301",
          \u0128: "i\u0307\u0303"
        }
      }
    };
    function localeLowerCase(str, locale) {
      var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
      if (lang)
        return lowerCase(str.replace(lang.regexp, function(m) {
          return lang.map[m];
        }));
      return lowerCase(str);
    }
    exports.localeLowerCase = localeLowerCase;
    function lowerCase(str) {
      return str.toLowerCase();
    }
    exports.lowerCase = lowerCase;
  }
});

// node_modules/no-case/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/no-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.noCase = void 0;
    var lower_case_1 = require_dist();
    var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
    var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
    function noCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lower_case_1.lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
      var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
      var start = 0;
      var end = result.length;
      while (result.charAt(start) === "\0")
        start++;
      while (result.charAt(end - 1) === "\0")
        end--;
      return result.slice(start, end).split("\0").map(transform).join(delimiter);
    }
    exports.noCase = noCase;
    function replace(input, re, value) {
      if (re instanceof RegExp)
        return input.replace(re, value);
      return re.reduce(function(input2, re2) {
        return input2.replace(re2, value);
      }, input);
    }
  }
});

// node_modules/pascal-case/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/pascal-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pascalCase = exports.pascalCaseTransformMerge = exports.pascalCaseTransform = void 0;
    var tslib_1 = require_tslib();
    var no_case_1 = require_dist2();
    function pascalCaseTransform(input, index) {
      var firstChar = input.charAt(0);
      var lowerChars = input.substr(1).toLowerCase();
      if (index > 0 && firstChar >= "0" && firstChar <= "9") {
        return "_" + firstChar + lowerChars;
      }
      return "" + firstChar.toUpperCase() + lowerChars;
    }
    exports.pascalCaseTransform = pascalCaseTransform;
    function pascalCaseTransformMerge(input) {
      return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
    }
    exports.pascalCaseTransformMerge = pascalCaseTransformMerge;
    function pascalCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: "", transform: pascalCaseTransform }, options));
    }
    exports.pascalCase = pascalCase;
  }
});

// node_modules/camel-case/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/camel-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.camelCase = exports.camelCaseTransformMerge = exports.camelCaseTransform = void 0;
    var tslib_1 = require_tslib();
    var pascal_case_1 = require_dist3();
    function camelCaseTransform(input, index) {
      if (index === 0)
        return input.toLowerCase();
      return pascal_case_1.pascalCaseTransform(input, index);
    }
    exports.camelCaseTransform = camelCaseTransform;
    function camelCaseTransformMerge(input, index) {
      if (index === 0)
        return input.toLowerCase();
      return pascal_case_1.pascalCaseTransformMerge(input);
    }
    exports.camelCaseTransformMerge = camelCaseTransformMerge;
    function camelCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return pascal_case_1.pascalCase(input, tslib_1.__assign({ transform: camelCaseTransform }, options));
    }
    exports.camelCase = camelCase;
  }
});

// node_modules/dot-case/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/dot-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dotCase = void 0;
    var tslib_1 = require_tslib();
    var no_case_1 = require_dist2();
    function dotCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: "." }, options));
    }
    exports.dotCase = dotCase;
  }
});

// node_modules/snake-case/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/snake-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.snakeCase = void 0;
    var tslib_1 = require_tslib();
    var dot_case_1 = require_dist5();
    function snakeCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return dot_case_1.dotCase(input, tslib_1.__assign({ delimiter: "_" }, options));
    }
    exports.snakeCase = snakeCase;
  }
});

// node_modules/upper-case-first/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/upper-case-first/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.upperCaseFirst = void 0;
    function upperCaseFirst(input) {
      return input.charAt(0).toUpperCase() + input.substr(1);
    }
    exports.upperCaseFirst = upperCaseFirst;
  }
});

// node_modules/capital-case/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/capital-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.capitalCase = exports.capitalCaseTransform = void 0;
    var tslib_1 = require_tslib();
    var no_case_1 = require_dist2();
    var upper_case_first_1 = require_dist7();
    function capitalCaseTransform(input) {
      return upper_case_first_1.upperCaseFirst(input.toLowerCase());
    }
    exports.capitalCaseTransform = capitalCaseTransform;
    function capitalCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: " ", transform: capitalCaseTransform }, options));
    }
    exports.capitalCase = capitalCase;
  }
});

// node_modules/header-case/dist/index.js
var require_dist9 = __commonJS({
  "node_modules/header-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.headerCase = void 0;
    var tslib_1 = require_tslib();
    var capital_case_1 = require_dist8();
    function headerCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return capital_case_1.capitalCase(input, tslib_1.__assign({ delimiter: "-" }, options));
    }
    exports.headerCase = headerCase;
  }
});

// node_modules/axios-case-converter/lib/decorators.js
var require_decorators = __commonJS({
  "node_modules/axios-case-converter/lib/decorators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.preserveSpecificKeys = exports.applyCaseOptions = void 0;
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var applyCaseOptions = function applyCaseOptions2(fn, defaultOptions) {
      return function(input, options) {
        return fn(input, _objectSpread(_objectSpread({}, defaultOptions), options));
      };
    };
    exports.applyCaseOptions = applyCaseOptions;
    var preserveSpecificKeys = function preserveSpecificKeys2(fn, keys) {
      var condition = typeof keys === "function" ? keys : function(input) {
        return keys.includes(input);
      };
      return function(input, options) {
        return condition(input, options) ? input : fn(input, options);
      };
    };
    exports.preserveSpecificKeys = preserveSpecificKeys;
  }
});

// node_modules/axios-case-converter/lib/util.js
var require_util2 = __commonJS({
  "node_modules/axios-case-converter/lib/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isTransformable = exports.isPlainObject = exports.isFormData = exports.isURLSearchParams = void 0;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var isURLSearchParams = function isURLSearchParams2(value) {
      return typeof URLSearchParams !== "undefined" && value instanceof URLSearchParams;
    };
    exports.isURLSearchParams = isURLSearchParams;
    var isFormData = function isFormData2(value) {
      return typeof FormData !== "undefined" && value instanceof FormData;
    };
    exports.isFormData = isFormData;
    var isPlainObject = function isPlainObject2(value) {
      return _typeof(value) === "object" && value !== null && Object.prototype.toString.call(value) === "[object Object]";
    };
    exports.isPlainObject = isPlainObject;
    var isTransformable = function isTransformable2(value) {
      return Array.isArray(value) || isPlainObject(value) || isFormData(value) || isURLSearchParams(value);
    };
    exports.isTransformable = isTransformable;
  }
});

// node_modules/axios-case-converter/lib/transformers.js
var require_transformers = __commonJS({
  "node_modules/axios-case-converter/lib/transformers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createObjectTransformers = exports.createObjectTransformerOf = exports.createObjectTransformer = void 0;
    var _camelCase = require_dist4();
    var _snakeCase = require_dist6();
    var _headerCase = require_dist9();
    var _decorators = require_decorators();
    var _util = require_util2();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;
      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = o[Symbol.iterator]();
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var caseFunctions = {
      snake: _snakeCase.snakeCase,
      camel: _camelCase.camelCase,
      header: _headerCase.headerCase
    };
    var transformObjectUsingCallbackRecursive = function transformObjectUsingCallbackRecursive2(data, fn, overwrite) {
      if (!(0, _util.isTransformable)(data)) {
        return data;
      }
      if (((0, _util.isFormData)(data) || (0, _util.isURLSearchParams)(data)) && (!data.entries || overwrite && !data["delete"])) {
        var type = (0, _util.isFormData)(data) ? "FormData" : "URLSearchParams";
        var polyfill = (0, _util.isFormData)(data) ? "https://github.com/jimmywarting/FormData" : "https://github.com/jerrybendy/url-search-params-polyfill";
        if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
          console.warn("Be careful that ".concat(type, " cannot be transformed on React Native. If you intentionally implemented, ignore this kind of warning: https://facebook.github.io/react-native/docs/debugging.html"));
        } else {
          if (!data.entries) {
            console.warn("You must use polyfill of ".concat(type, ".prototype.entries() on Internet Explorer or Safari: ").concat(polyfill));
          }
          if (overwrite && !data["delete"]) {
            console.warn("You must use polyfill of ".concat(type, ".prototype.delete() on Internet Explorer or Safari: ").concat(polyfill));
          }
        }
        return data;
      }
      var prototype = Object.getPrototypeOf(data);
      var store = overwrite ? data : !prototype ? Object.create(null) : new prototype.constructor();
      var series;
      if ((0, _util.isFormData)(data) || (0, _util.isURLSearchParams)(data)) {
        series = data.entries();
        if (overwrite) {
          series = _toConsumableArray(series);
          var _iterator = _createForOfIteratorHelper(series), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _step$value = _slicedToArray(_step.value, 1), key = _step$value[0];
              data["delete"](key);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      } else {
        series = Object.entries(data);
        if (overwrite && !Array.isArray(data)) {
          var _iterator2 = _createForOfIteratorHelper(series), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var _step2$value = _slicedToArray(_step2.value, 1), _key = _step2$value[0];
              delete data[_key];
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
      var _iterator3 = _createForOfIteratorHelper(series), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var _step3$value = _slicedToArray(_step3.value, 2), _key2 = _step3$value[0], value = _step3$value[1];
          if ((0, _util.isFormData)(store) || (0, _util.isURLSearchParams)(store)) {
            store.append(fn(_key2), value);
          } else if (_key2 !== "__proto__") {
            store[fn(typeof _key2 === "string" ? _key2 : "".concat(_key2))] = transformObjectUsingCallbackRecursive2(value, fn, overwrite);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return store;
    };
    var transformObjectUsingCallback = function transformObjectUsingCallback2(data, fn, options) {
      fn = (0, _decorators.applyCaseOptions)(fn, _objectSpread({
        stripRegexp: /[^A-Z0-9[\]]+/gi
      }, options === null || options === void 0 ? void 0 : options.caseOptions));
      if (options !== null && options !== void 0 && options.preservedKeys) {
        fn = (0, _decorators.preserveSpecificKeys)(fn, options.preservedKeys);
      }
      return transformObjectUsingCallbackRecursive(data, fn, (options === null || options === void 0 ? void 0 : options.overwrite) || false);
    };
    var createObjectTransformer = function createObjectTransformer2(fn) {
      return function(data, options) {
        return transformObjectUsingCallback(data, fn, options);
      };
    };
    exports.createObjectTransformer = createObjectTransformer;
    var createObjectTransformerOf = function createObjectTransformerOf2(functionName, options) {
      return createObjectTransformer((options === null || options === void 0 ? void 0 : options[functionName]) || caseFunctions[functionName]);
    };
    exports.createObjectTransformerOf = createObjectTransformerOf;
    var createObjectTransformers = function createObjectTransformers2(options) {
      var functionNames = Object.keys(caseFunctions);
      var objectTransformers = {};
      for (var _i2 = 0, _functionNames = functionNames; _i2 < _functionNames.length; _i2++) {
        var functionName = _functionNames[_i2];
        objectTransformers[functionName] = createObjectTransformerOf(functionName, options);
      }
      return objectTransformers;
    };
    exports.createObjectTransformers = createObjectTransformers;
  }
});

// node_modules/axios-case-converter/lib/middleware.js
var require_middleware = __commonJS({
  "node_modules/axios-case-converter/lib/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.applyCaseMiddleware = exports.createCamelResponseTransformer = exports.createSnakeRequestTransformer = exports.createSnakeParamsInterceptor = void 0;
    var _transformers = require_transformers();
    var _util = require_util2();
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var createSnakeParamsInterceptor = function createSnakeParamsInterceptor2(options) {
      var _createObjectTransfor = (0, _transformers.createObjectTransformers)(options === null || options === void 0 ? void 0 : options.caseFunctions), snake = _createObjectTransfor.snake;
      return function(config) {
        if (config.params) {
          config.params = snake(config.params, options);
        }
        return config;
      };
    };
    exports.createSnakeParamsInterceptor = createSnakeParamsInterceptor;
    var createSnakeRequestTransformer = function createSnakeRequestTransformer2(options) {
      var _createObjectTransfor2 = (0, _transformers.createObjectTransformers)(options === null || options === void 0 ? void 0 : options.caseFunctions), snake = _createObjectTransfor2.snake, header = _createObjectTransfor2.header;
      return function(data, headers) {
        if (!(options !== null && options !== void 0 && options.ignoreHeaders) && (0, _util.isPlainObject)(headers)) {
          for (var _i = 0, _Object$entries = Object.entries(headers); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];
            header(value, _objectSpread({
              overwrite: true
            }, options));
            if (!["common", "delete", "get", "head", "post", "put", "patch"].includes(key)) {
              delete headers[key];
              headers[Object.keys(header(_defineProperty({}, key, null), options))[0]] = value;
            }
          }
        }
        return snake(data, options);
      };
    };
    exports.createSnakeRequestTransformer = createSnakeRequestTransformer;
    var createCamelResponseTransformer = function createCamelResponseTransformer2(options) {
      var _createObjectTransfor3 = (0, _transformers.createObjectTransformers)(options === null || options === void 0 ? void 0 : options.caseFunctions), camel = _createObjectTransfor3.camel;
      return function(data, headers) {
        if (!(options !== null && options !== void 0 && options.ignoreHeaders)) {
          camel(headers, _objectSpread({
            overwrite: true
          }, options));
        }
        return camel(data, options);
      };
    };
    exports.createCamelResponseTransformer = createCamelResponseTransformer;
    var applyCaseMiddleware = function applyCaseMiddleware2(axios, options) {
      var _options$caseMiddlewa, _options$caseMiddlewa2, _options$caseMiddlewa3;
      axios.defaults.transformRequest = [(options === null || options === void 0 ? void 0 : (_options$caseMiddlewa = options.caseMiddleware) === null || _options$caseMiddlewa === void 0 ? void 0 : _options$caseMiddlewa.requestTransformer) || createSnakeRequestTransformer(options)].concat(_toConsumableArray(Array.isArray(axios.defaults.transformRequest) ? axios.defaults.transformRequest : axios.defaults.transformRequest !== void 0 ? [axios.defaults.transformRequest] : []));
      axios.defaults.transformResponse = [].concat(_toConsumableArray(Array.isArray(axios.defaults.transformResponse) ? axios.defaults.transformResponse : axios.defaults.transformResponse !== void 0 ? [axios.defaults.transformResponse] : []), [(options === null || options === void 0 ? void 0 : (_options$caseMiddlewa2 = options.caseMiddleware) === null || _options$caseMiddlewa2 === void 0 ? void 0 : _options$caseMiddlewa2.responseTransformer) || createCamelResponseTransformer(options)]);
      axios.interceptors.request.use((options === null || options === void 0 ? void 0 : (_options$caseMiddlewa3 = options.caseMiddleware) === null || _options$caseMiddlewa3 === void 0 ? void 0 : _options$caseMiddlewa3.requestInterceptor) || createSnakeParamsInterceptor(options));
      return axios;
    };
    exports.applyCaseMiddleware = applyCaseMiddleware;
  }
});

// node_modules/axios-case-converter/lib/types.js
var require_types = __commonJS({
  "node_modules/axios-case-converter/lib/types.js"() {
    "use strict";
  }
});

// node_modules/axios-case-converter/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/axios-case-converter/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports["default"] = void 0;
    var _middleware = require_middleware();
    var _types = require_types();
    Object.keys(_types).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _types[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _types[key];
        }
      });
    });
    var _default = _middleware.applyCaseMiddleware;
    exports["default"] = _default;
  }
});

// node_modules/url-join/lib/url-join.js
var require_url_join = __commonJS({
  "node_modules/url-join/lib/url-join.js"(exports, module2) {
    (function(name, context, definition) {
      if (typeof module2 !== "undefined" && module2.exports)
        module2.exports = definition();
      else if (typeof define === "function" && define.amd)
        define(definition);
      else
        context[name] = definition();
    })("urljoin", exports, function() {
      function normalize(strArray) {
        var resultArray = [];
        if (strArray.length === 0) {
          return "";
        }
        if (typeof strArray[0] !== "string") {
          throw new TypeError("Url must be a string. Received " + strArray[0]);
        }
        if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
          var first = strArray.shift();
          strArray[0] = first + strArray[0];
        }
        if (strArray[0].match(/^file:\/\/\//)) {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, "$1:///");
        } else {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, "$1://");
        }
        for (var i = 0; i < strArray.length; i++) {
          var component = strArray[i];
          if (typeof component !== "string") {
            throw new TypeError("Url must be a string. Received " + component);
          }
          if (component === "") {
            continue;
          }
          if (i > 0) {
            component = component.replace(/^[\/]+/, "");
          }
          if (i < strArray.length - 1) {
            component = component.replace(/[\/]+$/, "");
          } else {
            component = component.replace(/[\/]+$/, "/");
          }
          resultArray.push(component);
        }
        var str = resultArray.join("/");
        str = str.replace(/\/(\?|&|#[^!])/g, "$1");
        var parts = str.split("?");
        str = parts.shift() + (parts.length > 0 ? "?" : "") + parts.join("&");
        return str;
      }
      return function() {
        var input;
        if (typeof arguments[0] === "object") {
          input = arguments[0];
        } else {
          input = [].slice.call(arguments);
        }
        return normalize(input);
      };
    });
  }
});

// node_modules/ts-custom-error/dist/custom-error.js
var require_custom_error = __commonJS({
  "node_modules/ts-custom-error/dist/custom-error.js"(exports) {
    function fixProto(target, prototype) {
      var setPrototypeOf = Object.setPrototypeOf;
      setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;
    }
    function fixStack(target, fn) {
      if (fn === void 0) {
        fn = target.constructor;
      }
      var captureStackTrace = Error.captureStackTrace;
      captureStackTrace && captureStackTrace(target, fn);
    }
    var __extends = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) {
            if (b2.hasOwnProperty(p)) {
              d2[p] = b2[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var CustomError = function(_super) {
      __extends(CustomError2, _super);
      function CustomError2(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        Object.defineProperty(_this, "name", {
          value: _newTarget.name,
          enumerable: false,
          configurable: true
        });
        fixProto(_this, _newTarget.prototype);
        fixStack(_this);
        return _this;
      }
      return CustomError2;
    }(Error);
    var __spreadArrays = function() {
      var arguments$1 = arguments;
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
        s += arguments$1[i].length;
      }
      for (var r = Array(s), k = 0, i = 0; i < il; i++) {
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
          r[k] = a[j];
        }
      }
      return r;
    };
    function customErrorFactory(fn, parent) {
      if (parent === void 0) {
        parent = Error;
      }
      function CustomError2() {
        var arguments$1 = arguments;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments$1[_i];
        }
        if (!(this instanceof CustomError2)) {
          return new (CustomError2.bind.apply(CustomError2, __spreadArrays([void 0], args)))();
        }
        parent.apply(this, args);
        Object.defineProperty(this, "name", {
          value: fn.name || parent.name,
          enumerable: false,
          configurable: true
        });
        fn.apply(this, args);
        fixStack(this, CustomError2);
      }
      return Object.defineProperties(CustomError2, {
        prototype: {
          value: Object.create(parent.prototype, {
            constructor: {
              value: CustomError2,
              writable: true,
              configurable: true
            }
          })
        }
      });
    }
    exports.CustomError = CustomError;
    exports.customErrorFactory = customErrorFactory;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/types/errors.js
var require_errors2 = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/types/errors.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TodoistRequestError = void 0;
    var ts_custom_error_1 = require_custom_error();
    var authenticationErrorCodes = [401, 403];
    var TodoistRequestError = function(_super) {
      __extends(TodoistRequestError2, _super);
      function TodoistRequestError2(message, httpStatusCode, responseData) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.httpStatusCode = httpStatusCode;
        _this.responseData = responseData;
        _this.isAuthenticationError = function() {
          if (!_this.httpStatusCode) {
            return false;
          }
          return authenticationErrorCodes.includes(_this.httpStatusCode);
        };
        Object.defineProperty(_this, "name", { value: "TodoistRequestError" });
        return _this;
      }
      return TodoistRequestError2;
    }(ts_custom_error_1.CustomError);
    exports.TodoistRequestError = TodoistRequestError;
  }
});

// node_modules/uuid/dist/esm-browser/rng.js
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var getRandomValues, rnds8;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-browser/rng.js"() {
    rnds8 = new Uint8Array(16);
  }
});

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-browser/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-browser/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-browser/stringify.js
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, i, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-browser/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-browser/v1.js
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  var msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  var tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-browser/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-browser/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
var DNS, URL;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-browser/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-browser/md5.js"() {
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-browser/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-browser/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-browser/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-browser/sha1.js"() {
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-browser/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-browser/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-browser/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-browser/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-browser/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-browser/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-browser/index.js
var esm_browser_exports = {};
__export(esm_browser_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_browser = __esm({
  "node_modules/uuid/dist/esm-browser/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module2) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/regenerator-runtime/runtime.js
var require_runtime = __commonJS({
  "node_modules/regenerator-runtime/runtime.js"(exports, module2) {
    var runtime = function(exports2) {
      "use strict";
      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined2;
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define2(obj, key, value) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        define2({}, "");
      } catch (err) {
        define2 = function(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap(innerFn, outerFn, self2, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        generator._invoke = makeInvokeMethod(innerFn, self2, context);
        return generator;
      }
      exports2.wrap = wrap;
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define2(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        IteratorPrototype = NativeIteratorPrototype;
      }
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define2(Gp, "constructor", GeneratorFunctionPrototype);
      define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define2(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      exports2.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };
      exports2.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define2(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };
      exports2.awrap = function(arg) {
        return { __await: arg };
      };
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value2) {
                invoke("next", value2, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }
            return PromiseImpl.resolve(value).then(function(unwrapped) {
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              return invoke("throw", error, resolve, reject);
            });
          }
        }
        var previousPromise;
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        this._invoke = enqueue;
      }
      defineIteratorMethods(AsyncIterator.prototype);
      define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      });
      exports2.AsyncIterator = AsyncIterator;
      exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0)
          PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
        return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      };
      function makeInvokeMethod(innerFn, self2, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
            return doneResult();
          }
          context.method = method;
          context.arg = arg;
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if (context.method === "next") {
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }
              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }
            state = GenStateExecuting;
            var record = tryCatch(innerFn, self2, context);
            if (record.type === "normal") {
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;
              if (record.arg === ContinueSentinel) {
                continue;
              }
              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined2) {
          context.delegate = null;
          if (context.method === "throw") {
            if (delegate.iterator["return"]) {
              context.method = "return";
              context.arg = undefined2;
              maybeInvokeDelegate(delegate, context);
              if (context.method === "throw") {
                return ContinueSentinel;
              }
            }
            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }
          return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }
        if (info.done) {
          context[delegate.resultName] = info.value;
          context.next = delegate.nextLoc;
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined2;
          }
        } else {
          return info;
        }
        context.delegate = null;
        return ContinueSentinel;
      }
      defineIteratorMethods(Gp);
      define2(Gp, toStringTagSymbol, "Generator");
      define2(Gp, iteratorSymbol, function() {
        return this;
      });
      define2(Gp, "toString", function() {
        return "[object Generator]";
      });
      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
      exports2.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
        return function next() {
          while (keys.length) {
            var key2 = keys.pop();
            if (key2 in object) {
              next.value = key2;
              next.done = false;
              return next;
            }
          }
          next.done = true;
          return next;
        };
      };
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
          if (typeof iterable.next === "function") {
            return iterable;
          }
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next2() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next2.value = iterable[i];
                  next2.done = false;
                  return next2;
                }
              }
              next2.value = undefined2;
              next2.done = true;
              return next2;
            };
            return next.next = next;
          }
        }
        return { next: doneResult };
      }
      exports2.values = values;
      function doneResult() {
        return { value: undefined2, done: true };
      }
      Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          this.sent = this._sent = undefined2;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined2;
          this.tryEntries.forEach(resetTryEntry);
          if (!skipTempReset) {
            for (var name in this) {
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined2;
              }
            }
          }
        },
        stop: function() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
          return this.rval;
        },
        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
            if (caught) {
              context.method = "next";
              context.arg = undefined2;
            }
            return !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
            if (entry.tryLoc === "root") {
              return handle("end");
            }
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            finallyEntry = null;
          }
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }
          return this.complete(record);
        },
        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
          return ContinueSentinel;
        },
        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          };
          if (this.method === "next") {
            this.arg = undefined2;
          }
          return ContinueSentinel;
        }
      };
      return exports2;
    }(typeof module2 === "object" ? module2.exports : {});
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module2) {
    module2.exports = require_runtime();
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module2) {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return module2.exports = _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof(obj);
    }
    module2.exports = _typeof, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports, module2) {
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    module2.exports = _asyncToGenerator, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module2) {
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module2.exports = _defineProperty, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/is-retry-allowed/index.js
var require_is_retry_allowed = __commonJS({
  "node_modules/is-retry-allowed/index.js"(exports, module2) {
    "use strict";
    var denyList = new Set([
      "ENOTFOUND",
      "ENETUNREACH",
      "UNABLE_TO_GET_ISSUER_CERT",
      "UNABLE_TO_GET_CRL",
      "UNABLE_TO_DECRYPT_CERT_SIGNATURE",
      "UNABLE_TO_DECRYPT_CRL_SIGNATURE",
      "UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY",
      "CERT_SIGNATURE_FAILURE",
      "CRL_SIGNATURE_FAILURE",
      "CERT_NOT_YET_VALID",
      "CERT_HAS_EXPIRED",
      "CRL_NOT_YET_VALID",
      "CRL_HAS_EXPIRED",
      "ERROR_IN_CERT_NOT_BEFORE_FIELD",
      "ERROR_IN_CERT_NOT_AFTER_FIELD",
      "ERROR_IN_CRL_LAST_UPDATE_FIELD",
      "ERROR_IN_CRL_NEXT_UPDATE_FIELD",
      "OUT_OF_MEM",
      "DEPTH_ZERO_SELF_SIGNED_CERT",
      "SELF_SIGNED_CERT_IN_CHAIN",
      "UNABLE_TO_GET_ISSUER_CERT_LOCALLY",
      "UNABLE_TO_VERIFY_LEAF_SIGNATURE",
      "CERT_CHAIN_TOO_LONG",
      "CERT_REVOKED",
      "INVALID_CA",
      "PATH_LENGTH_EXCEEDED",
      "INVALID_PURPOSE",
      "CERT_UNTRUSTED",
      "CERT_REJECTED",
      "HOSTNAME_MISMATCH"
    ]);
    module2.exports = (error) => !denyList.has(error && error.code);
  }
});

// node_modules/axios-retry/lib/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/axios-retry/lib/cjs/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNetworkError = isNetworkError;
    exports.isRetryableError = isRetryableError;
    exports.isSafeRequestError = isSafeRequestError;
    exports.isIdempotentRequestError = isIdempotentRequestError;
    exports.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
    exports.exponentialDelay = exponentialDelay;
    exports.default = axiosRetry;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _isRetryAllowed = _interopRequireDefault(require_is_retry_allowed());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2.default)(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var namespace = "axios-retry";
    function isNetworkError(error) {
      return !error.response && Boolean(error.code) && error.code !== "ECONNABORTED" && (0, _isRetryAllowed.default)(error);
    }
    var SAFE_HTTP_METHODS = ["get", "head", "options"];
    var IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(["put", "delete"]);
    function isRetryableError(error) {
      return error.code !== "ECONNABORTED" && (!error.response || error.response.status >= 500 && error.response.status <= 599);
    }
    function isSafeRequestError(error) {
      if (!error.config) {
        return false;
      }
      return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
    }
    function isIdempotentRequestError(error) {
      if (!error.config) {
        return false;
      }
      return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
    }
    function isNetworkOrIdempotentRequestError(error) {
      return isNetworkError(error) || isIdempotentRequestError(error);
    }
    function noDelay() {
      return 0;
    }
    function exponentialDelay() {
      var retryNumber = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var delay = Math.pow(2, retryNumber) * 100;
      var randomSum = delay * 0.2 * Math.random();
      return delay + randomSum;
    }
    function getCurrentState(config) {
      var currentState = config[namespace] || {};
      currentState.retryCount = currentState.retryCount || 0;
      config[namespace] = currentState;
      return currentState;
    }
    function getRequestOptions(config, defaultOptions) {
      return _objectSpread(_objectSpread({}, defaultOptions), config[namespace]);
    }
    function fixConfig(axios, config) {
      if (axios.defaults.agent === config.agent) {
        delete config.agent;
      }
      if (axios.defaults.httpAgent === config.httpAgent) {
        delete config.httpAgent;
      }
      if (axios.defaults.httpsAgent === config.httpsAgent) {
        delete config.httpsAgent;
      }
    }
    function shouldRetry(_x, _x2, _x3, _x4) {
      return _shouldRetry.apply(this, arguments);
    }
    function _shouldRetry() {
      _shouldRetry = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(retries, retryCondition, currentState, error) {
        var shouldRetryOrPromise;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);
                if (!((0, _typeof2.default)(shouldRetryOrPromise) === "object")) {
                  _context2.next = 11;
                  break;
                }
                _context2.prev = 2;
                _context2.next = 5;
                return shouldRetryOrPromise;
              case 5:
                return _context2.abrupt("return", true);
              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2["catch"](2);
                return _context2.abrupt("return", false);
              case 11:
                return _context2.abrupt("return", shouldRetryOrPromise);
              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[2, 8]]);
      }));
      return _shouldRetry.apply(this, arguments);
    }
    function axiosRetry(axios, defaultOptions) {
      axios.interceptors.request.use(function(config) {
        var currentState = getCurrentState(config);
        currentState.lastRequestTime = Date.now();
        return config;
      });
      axios.interceptors.response.use(null, /* @__PURE__ */ function() {
        var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(error) {
          var config, _getRequestOptions, _getRequestOptions$re, retries, _getRequestOptions$re2, retryCondition, _getRequestOptions$re3, retryDelay, _getRequestOptions$sh, shouldResetTimeout, currentState, delay, lastRequestDuration;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = error.config;
                  if (config) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return", Promise.reject(error));
                case 3:
                  _getRequestOptions = getRequestOptions(config, defaultOptions), _getRequestOptions$re = _getRequestOptions.retries, retries = _getRequestOptions$re === void 0 ? 3 : _getRequestOptions$re, _getRequestOptions$re2 = _getRequestOptions.retryCondition, retryCondition = _getRequestOptions$re2 === void 0 ? isNetworkOrIdempotentRequestError : _getRequestOptions$re2, _getRequestOptions$re3 = _getRequestOptions.retryDelay, retryDelay = _getRequestOptions$re3 === void 0 ? noDelay : _getRequestOptions$re3, _getRequestOptions$sh = _getRequestOptions.shouldResetTimeout, shouldResetTimeout = _getRequestOptions$sh === void 0 ? false : _getRequestOptions$sh;
                  currentState = getCurrentState(config);
                  _context.next = 7;
                  return shouldRetry(retries, retryCondition, currentState, error);
                case 7:
                  if (!_context.sent) {
                    _context.next = 14;
                    break;
                  }
                  currentState.retryCount += 1;
                  delay = retryDelay(currentState.retryCount, error);
                  fixConfig(axios, config);
                  if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {
                    lastRequestDuration = Date.now() - currentState.lastRequestTime;
                    config.timeout = Math.max(config.timeout - lastRequestDuration - delay, 1);
                  }
                  config.transformRequest = [function(data) {
                    return data;
                  }];
                  return _context.abrupt("return", new Promise(function(resolve) {
                    return setTimeout(function() {
                      return resolve(axios(config));
                    }, delay);
                  }));
                case 14:
                  return _context.abrupt("return", Promise.reject(error));
                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function(_x5) {
          return _ref.apply(this, arguments);
        };
      }());
    }
    axiosRetry.isNetworkError = isNetworkError;
    axiosRetry.isSafeRequestError = isSafeRequestError;
    axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
    axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
    axiosRetry.exponentialDelay = exponentialDelay;
    axiosRetry.isRetryableError = isRetryableError;
  }
});

// node_modules/axios-retry/index.js
var require_axios_retry = __commonJS({
  "node_modules/axios-retry/index.js"(exports, module2) {
    var axiosRetry = require_cjs().default;
    module2.exports = axiosRetry;
    module2.exports.default = axiosRetry;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/restClient.js
var require_restClient = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/restClient.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.request = exports.isSuccess = void 0;
    var axios_1 = __importDefault(require_axios2());
    var axios_case_converter_1 = __importDefault(require_lib2());
    var url_join_1 = __importDefault(require_url_join());
    var errors_1 = require_errors2();
    var uuid_1 = (init_esm_browser(), esm_browser_exports);
    var axios_retry_1 = __importDefault(require_axios_retry());
    var defaultHeaders = {
      "Content-Type": "application/json"
    };
    function getAuthHeader(apiKey) {
      return "Bearer " + apiKey;
    }
    function isNetworkError(error) {
      return Boolean(!error.response && error.code !== "ECONNABORTED");
    }
    function getRetryDelay(retryCount) {
      return retryCount === 1 ? 0 : 500;
    }
    function isAxiosError(error) {
      var _a;
      return Boolean((_a = error) === null || _a === void 0 ? void 0 : _a.isAxiosError);
    }
    function getTodoistRequestError(error, originalStack) {
      var requestError = new errors_1.TodoistRequestError(error.message);
      requestError.stack = isAxiosError(error) && originalStack ? originalStack.stack : error.stack;
      if (isAxiosError(error) && error.response) {
        requestError.httpStatusCode = error.response.status;
        requestError.responseData = error.response.data;
      }
      return requestError;
    }
    function getRequestConfiguration(apiToken, requestId) {
      var authHeader = apiToken ? { Authorization: getAuthHeader(apiToken) } : void 0;
      var requestIdHeader = requestId ? { "X-Request-Id": requestId } : void 0;
      var headers = __assign(__assign(__assign({}, defaultHeaders), authHeader), requestIdHeader);
      return { headers };
    }
    function getAxiosClient(apiToken, requestId) {
      var configuration = getRequestConfiguration(apiToken, requestId);
      var client = (0, axios_case_converter_1.default)(axios_1.default.create(configuration));
      (0, axios_retry_1.default)(client, {
        retries: 3,
        retryCondition: isNetworkError,
        retryDelay: getRetryDelay
      });
      return client;
    }
    function isSuccess(response) {
      return response.status >= 200 && response.status < 300;
    }
    exports.isSuccess = isSuccess;
    function request(httpMethod, baseUri, relativePath, apiToken, payload, requestId) {
      return __awaiter(this, void 0, void 0, function() {
        var originalStack, axiosClient, _a, error_1;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              originalStack = new Error();
              _b.label = 1;
            case 1:
              _b.trys.push([1, 9, , 10]);
              if (httpMethod === "POST" && !requestId) {
                requestId = (0, uuid_1.v4)();
              }
              axiosClient = getAxiosClient(apiToken, requestId);
              _a = httpMethod;
              switch (_a) {
                case "GET":
                  return [3, 2];
                case "POST":
                  return [3, 4];
                case "DELETE":
                  return [3, 6];
              }
              return [3, 8];
            case 2:
              return [4, axiosClient.get((0, url_join_1.default)(baseUri, relativePath), { params: payload })];
            case 3:
              return [2, _b.sent()];
            case 4:
              return [4, axiosClient.post((0, url_join_1.default)(baseUri, relativePath), payload)];
            case 5:
              return [2, _b.sent()];
            case 6:
              return [4, axiosClient.delete((0, url_join_1.default)(baseUri, relativePath))];
            case 7:
              return [2, _b.sent()];
            case 8:
              return [3, 10];
            case 9:
              error_1 = _b.sent();
              if (!isAxiosError(error_1) && !(error_1 instanceof Error)) {
                throw new Error("An unknown error occurred during the request");
              }
              throw getTodoistRequestError(error_1, originalStack);
            case 10:
              return [2];
          }
        });
      });
    }
    exports.request = request;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/taskConverters.js
var require_taskConverters = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/taskConverters.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTaskFromQuickAddResponse = void 0;
    var showTaskEndpoint = "https://todoist.com/showTask";
    function getTaskUrlFromQuickAddResponse(responseData) {
      return responseData.syncId ? showTaskEndpoint + "?id=" + responseData.id + "&sync_id=" + responseData.syncId : showTaskEndpoint + "?id=" + responseData.id;
    }
    function getTaskFromQuickAddResponse(responseData) {
      var _a;
      var due = responseData.due ? __assign(__assign({ recurring: responseData.due.isRecurring, string: responseData.due.string, date: responseData.due.date }, responseData.due.timezone !== null && { datetime: responseData.due.date }), responseData.due.timezone !== null && { timezone: responseData.due.timezone }) : void 0;
      var task = __assign(__assign(__assign({ id: responseData.id, order: responseData.childOrder, content: responseData.content, description: responseData.description, projectId: responseData.projectId, sectionId: (_a = responseData.sectionId) !== null && _a !== void 0 ? _a : 0, completed: responseData.checked === 1, labelIds: responseData.labels, priority: responseData.priority, commentCount: 0, created: responseData.dateAdded, url: getTaskUrlFromQuickAddResponse(responseData) }, due !== void 0 && { due }), responseData.parentId !== null && { parentId: responseData.parentId }), responseData.responsibleUid !== null && { assignee: responseData.responsibleUid });
      return task;
    }
    exports.getTaskFromQuickAddResponse = getTaskFromQuickAddResponse;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/consts/endpoints.js
var require_endpoints = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/consts/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_REVOKE_TOKEN = exports.ENDPOINT_GET_TOKEN = exports.ENDPOINT_AUTHORIZATION = exports.ENDPOINT_SYNC_QUICK_ADD = exports.ENDPOINT_REST_PROJECT_COLLABORATORS = exports.ENDPOINT_REST_TASK_REOPEN = exports.ENDPOINT_REST_TASK_CLOSE = exports.ENDPOINT_REST_COMMENTS = exports.ENDPOINT_REST_LABELS = exports.ENDPOINT_REST_SECTIONS = exports.ENDPOINT_REST_PROJECTS = exports.ENDPOINT_REST_TASKS = exports.API_AUTHORIZATION_BASE_URI = exports.API_SYNC_BASE_URI = exports.API_REST_BASE_URI = void 0;
    exports.API_REST_BASE_URI = "https://api.todoist.com/rest/v1/";
    exports.API_SYNC_BASE_URI = "https://api.todoist.com/sync/v8/";
    exports.API_AUTHORIZATION_BASE_URI = "https://todoist.com/oauth/";
    exports.ENDPOINT_REST_TASKS = "tasks";
    exports.ENDPOINT_REST_PROJECTS = "projects";
    exports.ENDPOINT_REST_SECTIONS = "sections";
    exports.ENDPOINT_REST_LABELS = "labels";
    exports.ENDPOINT_REST_COMMENTS = "comments";
    exports.ENDPOINT_REST_TASK_CLOSE = "close";
    exports.ENDPOINT_REST_TASK_REOPEN = "reopen";
    exports.ENDPOINT_REST_PROJECT_COLLABORATORS = "collaborators";
    exports.ENDPOINT_SYNC_QUICK_ADD = "quick/add";
    exports.ENDPOINT_AUTHORIZATION = "authorize";
    exports.ENDPOINT_GET_TOKEN = "access_token";
    exports.ENDPOINT_REVOKE_TOKEN = "access_tokens/revoke";
  }
});

// node_modules/@doist/todoist-api-typescript/dist/types/requests.js
var require_requests = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/types/requests.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@doist/todoist-api-typescript/dist/types/index.js
var require_types2 = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_entities(), exports);
    __exportStar(require_errors2(), exports);
    __exportStar(require_requests(), exports);
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/validators.js
var require_validators = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/validators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateUserArray = exports.validateUser = exports.validateCommentArray = exports.validateComment = exports.validateLabelArray = exports.validateLabel = exports.validateSectionArray = exports.validateSection = exports.validateProjectArray = exports.validateProject = exports.validateTaskArray = exports.validateTask = void 0;
    var types_1 = require_types2();
    function validateTask(input) {
      return types_1.Task.check(input);
    }
    exports.validateTask = validateTask;
    function validateTaskArray(input) {
      return input.map(validateTask);
    }
    exports.validateTaskArray = validateTaskArray;
    function validateProject(input) {
      return types_1.Project.check(input);
    }
    exports.validateProject = validateProject;
    function validateProjectArray(input) {
      return input.map(validateProject);
    }
    exports.validateProjectArray = validateProjectArray;
    function validateSection(input) {
      return types_1.Section.check(input);
    }
    exports.validateSection = validateSection;
    function validateSectionArray(input) {
      return input.map(validateSection);
    }
    exports.validateSectionArray = validateSectionArray;
    function validateLabel(input) {
      return types_1.Label.check(input);
    }
    exports.validateLabel = validateLabel;
    function validateLabelArray(input) {
      return input.map(validateLabel);
    }
    exports.validateLabelArray = validateLabelArray;
    function validateComment(input) {
      return types_1.Comment.check(input);
    }
    exports.validateComment = validateComment;
    function validateCommentArray(input) {
      return input.map(validateComment);
    }
    exports.validateCommentArray = validateCommentArray;
    function validateUser(input) {
      return types_1.User.check(input);
    }
    exports.validateUser = validateUser;
    function validateUserArray(input) {
      return input.map(validateUser);
    }
    exports.validateUserArray = validateUserArray;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/TodoistApi.js
var require_TodoistApi = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/TodoistApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TodoistApi = void 0;
    var entities_1 = require_entities();
    var restClient_1 = require_restClient();
    var taskConverters_1 = require_taskConverters();
    var url_join_1 = __importDefault(require_url_join());
    var endpoints_1 = require_endpoints();
    var validators_1 = require_validators();
    var TodoistApi2 = function() {
      function TodoistApi3(authToken) {
        this.authToken = authToken;
      }
      TodoistApi3.prototype.getTask = function(id) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_TASKS, String(id)), this.authToken)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateTask)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.getTasks = function(args) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_TASKS, this.authToken, args)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateTaskArray)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.addTask = function(args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_TASKS, this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateTask)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.quickAddTask = function(args) {
        return __awaiter(this, void 0, void 0, function() {
          var response, task;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_SYNC_BASE_URI, endpoints_1.ENDPOINT_SYNC_QUICK_ADD, this.authToken, args)];
              case 1:
                response = _a.sent();
                task = (0, taskConverters_1.getTaskFromQuickAddResponse)(response.data);
                return [2, (0, validators_1.validateTask)(task)];
            }
          });
        });
      };
      TodoistApi3.prototype.updateTask = function(id, args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_TASKS, String(id)), this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.closeTask = function(id, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_TASKS, String(id), endpoints_1.ENDPOINT_REST_TASK_CLOSE), this.authToken, void 0, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.reopenTask = function(id, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_TASKS, String(id), endpoints_1.ENDPOINT_REST_TASK_REOPEN), this.authToken, void 0, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.deleteTask = function(id, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("DELETE", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_TASKS, String(id)), this.authToken, void 0, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.getProject = function(id) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_PROJECTS, String(id)), this.authToken)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateProject)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.getProjects = function() {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_PROJECTS, this.authToken)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateProjectArray)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.addProject = function(args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_PROJECTS, this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateProject)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.updateProject = function(id, args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_PROJECTS, String(id)), this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.deleteProject = function(id, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("DELETE", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_PROJECTS, String(id)), this.authToken, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.getProjectCollaborators = function(projectId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(projectId);
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_PROJECTS, String(projectId), endpoints_1.ENDPOINT_REST_PROJECT_COLLABORATORS), this.authToken)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateUserArray)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.getSections = function(projectId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_SECTIONS, this.authToken, projectId && { projectId })];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateSectionArray)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.getSection = function(id) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_SECTIONS, String(id)), this.authToken)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateSection)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.addSection = function(args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_SECTIONS, this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateSection)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.updateSection = function(id, args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_SECTIONS, String(id)), this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.deleteSection = function(id, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("DELETE", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_SECTIONS, String(id)), this.authToken, void 0, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.getLabel = function(id) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_LABELS, String(id)), this.authToken)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateLabel)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.getLabels = function() {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_LABELS, this.authToken)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateLabelArray)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.addLabel = function(args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_LABELS, this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateLabel)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.updateLabel = function(id, args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_LABELS, String(id)), this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.deleteLabel = function(id, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("DELETE", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_LABELS, String(id)), this.authToken, void 0, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.getComments = function(args) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_COMMENTS, this.authToken, args)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateCommentArray)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.getComment = function(id) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("GET", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_COMMENTS, String(id)), this.authToken)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateComment)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.addComment = function(args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, endpoints_1.ENDPOINT_REST_COMMENTS, this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, validators_1.validateComment)(response.data)];
            }
          });
        });
      };
      TodoistApi3.prototype.updateComment = function(id, args, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("POST", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_COMMENTS, String(id)), this.authToken, args, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      TodoistApi3.prototype.deleteComment = function(id, requestId) {
        return __awaiter(this, void 0, void 0, function() {
          var response;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                entities_1.Int.check(id);
                return [4, (0, restClient_1.request)("DELETE", endpoints_1.API_REST_BASE_URI, (0, url_join_1.default)(endpoints_1.ENDPOINT_REST_COMMENTS, String(id)), this.authToken, void 0, requestId)];
              case 1:
                response = _a.sent();
                return [2, (0, restClient_1.isSuccess)(response)];
            }
          });
        });
      };
      return TodoistApi3;
    }();
    exports.TodoistApi = TodoistApi2;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/authentication.js
var require_authentication = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/authentication.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.revokeAuthToken = exports.getAuthToken = exports.getAuthorizationUrl = exports.getAuthStateParameter = void 0;
    var restClient_1 = require_restClient();
    var uuid_1 = (init_esm_browser(), esm_browser_exports);
    var types_1 = require_types2();
    var endpoints_1 = require_endpoints();
    function getAuthStateParameter() {
      return (0, uuid_1.v4)();
    }
    exports.getAuthStateParameter = getAuthStateParameter;
    function getAuthorizationUrl(clientId, permissions, state) {
      if (!(permissions === null || permissions === void 0 ? void 0 : permissions.length)) {
        throw new Error("At least one scope value should be passed for permissions.");
      }
      var scope = permissions.join(",");
      return "" + endpoints_1.API_AUTHORIZATION_BASE_URI + endpoints_1.ENDPOINT_AUTHORIZATION + "?client_id=" + clientId + "&scope=" + scope + "&state=" + state;
    }
    exports.getAuthorizationUrl = getAuthorizationUrl;
    function getAuthToken(args) {
      var _a;
      return __awaiter(this, void 0, void 0, function() {
        var response;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, (0, restClient_1.request)("POST", endpoints_1.API_AUTHORIZATION_BASE_URI, endpoints_1.ENDPOINT_GET_TOKEN, void 0, args)];
            case 1:
              response = _b.sent();
              if (response.status !== 200 || !((_a = response.data) === null || _a === void 0 ? void 0 : _a.accessToken)) {
                throw new types_1.TodoistRequestError("Authentication token exchange failed.", response.status, response.data);
              }
              return [2, response.data];
          }
        });
      });
    }
    exports.getAuthToken = getAuthToken;
    function revokeAuthToken(args) {
      return __awaiter(this, void 0, void 0, function() {
        var response;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, (0, restClient_1.request)("POST", endpoints_1.API_SYNC_BASE_URI, endpoints_1.ENDPOINT_REVOKE_TOKEN, void 0, args)];
            case 1:
              response = _a.sent();
              return [2, (0, restClient_1.isSuccess)(response)];
          }
        });
      });
    }
    exports.revokeAuthToken = revokeAuthToken;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/colors.js
var require_colors = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/colors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getColor = exports.colors = exports.taupe = exports.gray = exports.charcoal = exports.salmon = exports.magenta = exports.lavender = exports.violet = exports.grape = exports.blue = exports.lightBlue = exports.skyBlue = exports.turquoise = exports.mintGreen = exports.green = exports.limeGreen = exports.oliveGreen = exports.yellow = exports.orange = exports.red = exports.berryRed = void 0;
    exports.berryRed = { name: "Berry Red", id: 30, value: "#b8255f" };
    exports.red = { name: "Red", id: 31, value: "#db4035" };
    exports.orange = { name: "Orange", id: 32, value: "#ff9933" };
    exports.yellow = { name: "Yellow", id: 33, value: "#fad000" };
    exports.oliveGreen = { name: "Olive Green", id: 34, value: "#afb83b" };
    exports.limeGreen = { name: "Lime Green", id: 35, value: "#7ecc49" };
    exports.green = { name: "Green", id: 36, value: "#299438" };
    exports.mintGreen = { name: "Mint Green", id: 37, value: "#6accbc" };
    exports.turquoise = { name: "Turquoise", id: 38, value: "#158fad" };
    exports.skyBlue = { name: "Sky Blue", id: 39, value: "#14aaf5" };
    exports.lightBlue = { name: "Light Blue", id: 40, value: "#96c3eb" };
    exports.blue = { name: "Blue", id: 41, value: "#4073ff" };
    exports.grape = { name: "Grape", id: 42, value: "#884dff" };
    exports.violet = { name: "Violet", id: 43, value: "#af38eb" };
    exports.lavender = { name: "Lavender", id: 44, value: "#eb96eb" };
    exports.magenta = { name: "Magenta", id: 45, value: "#e05194" };
    exports.salmon = { name: "Salmon", id: 46, value: "#ff8d85" };
    exports.charcoal = { name: "Charcoal", id: 47, value: "#808080" };
    exports.gray = { name: "Gray", id: 48, value: "#b8b8b8" };
    exports.taupe = { name: "Taupe", id: 49, value: "#ccac93" };
    exports.colors = [
      exports.berryRed,
      exports.red,
      exports.orange,
      exports.yellow,
      exports.oliveGreen,
      exports.limeGreen,
      exports.green,
      exports.mintGreen,
      exports.turquoise,
      exports.skyBlue,
      exports.lightBlue,
      exports.blue,
      exports.grape,
      exports.violet,
      exports.lavender,
      exports.magenta,
      exports.salmon,
      exports.charcoal,
      exports.gray,
      exports.taupe
    ];
    function getColor(colorId) {
      var color = exports.colors.find(function(color2) {
        return color2.id === colorId;
      });
      return color !== null && color !== void 0 ? color : exports.charcoal;
    }
    exports.getColor = getColor;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/sanitization.js
var require_sanitization = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/sanitization.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSanitizedTasks = exports.getSanitizedContent = void 0;
    var BOLD_FORMAT = /(^|[\s!?,;>:]+)(?:\*\*|__|!!)(.+?)(\*\*|__|!!)(?=$|[\s!?,;><:]+)/gi;
    var ITALIC_FORMAT = /(^|[\s!?,;>:]+)(?:\*|_|!)(.+?)(\*|_|!)(?=$|[\s!?,;><:]+)/gi;
    var BOLD_ITALIC_FORMAT = /(^|[\s!?,;>:]+)(?:\*\*\*|___|!!!)(.+?)(\*\*\*|___|!!!)(?=$|[\s!?,;><:]+)/gi;
    var CODE_BLOCK_FORMAT = /```([\s\S]*?)```/gi;
    var CODE_INLINE_FORMAT = /`([^`]+)`/gi;
    var TODOIST_LINK = /((?:(?:onenote:)?[\w-]+):\/\/[^\s]+)\s+[[(]([^)]+)[\])]/gi;
    var MARKDOWN_LINK = /\[(.+?)\]\((.+?)\)/gi;
    var GMAIL_LINK = /\[\[gmail=(.+?),\s*(.+?)\]\]/gi;
    var OUTLOOK_LINK = /\[\[outlook=(.+?),\s*(.+?)\]\]/gi;
    var THUNDERBIRD_LINK = /\[\[thunderbird\n(.+)\n(.+)\n\s*\]\]/gi;
    var FAKE_SECTION_PREFIX = "* ";
    var FAKE_SECTION_SUFFIX = ":";
    function removeStyleFormatting(input) {
      if (!input.includes("!") && !input.includes("*") && !input.includes("_")) {
        return input;
      }
      function removeMarkdown(match, prefix, text) {
        return "" + prefix + text;
      }
      input = input.replace(BOLD_ITALIC_FORMAT, removeMarkdown);
      input = input.replace(BOLD_FORMAT, removeMarkdown);
      input = input.replace(ITALIC_FORMAT, removeMarkdown);
      return input;
    }
    function removeCodeFormatting(input) {
      function removeMarkdown(match, text) {
        return text;
      }
      input = input.replace(CODE_BLOCK_FORMAT, removeMarkdown);
      input = input.replace(CODE_INLINE_FORMAT, removeMarkdown);
      return input;
    }
    function removeFakeSectionFormatting(input) {
      if (input.startsWith(FAKE_SECTION_PREFIX)) {
        input = input.slice(FAKE_SECTION_PREFIX.length);
      }
      if (input.endsWith(FAKE_SECTION_SUFFIX)) {
        input = input.slice(0, input.length - FAKE_SECTION_SUFFIX.length);
      }
      return input;
    }
    function removeMarkdownLinks(input) {
      if (!input.includes("[") || !input.includes("]")) {
        return input;
      }
      function removeMarkdown(match, text) {
        return text;
      }
      return input.replace(MARKDOWN_LINK, removeMarkdown);
    }
    function removeTodoistLinks(input) {
      if (!input.includes("(") || !input.includes(")")) {
        return input;
      }
      function removeMarkdown(match, url, text) {
        return text;
      }
      return input.replace(TODOIST_LINK, removeMarkdown);
    }
    function removeAppLinks(input) {
      if (input.includes("gmail")) {
        input = input.replace(GMAIL_LINK, function(match, id, text) {
          return text;
        });
      }
      if (input.includes("outlook")) {
        input = input.replace(OUTLOOK_LINK, function(match, id, text) {
          return text;
        });
      }
      if (input.includes("thunderbird")) {
        input = input.replace(THUNDERBIRD_LINK, function(match, text) {
          return text;
        });
      }
      return input;
    }
    function getSanitizedContent(input) {
      input = removeStyleFormatting(input);
      input = removeCodeFormatting(input);
      input = removeFakeSectionFormatting(input);
      input = removeMarkdownLinks(input);
      input = removeTodoistLinks(input);
      input = removeAppLinks(input);
      return input;
    }
    exports.getSanitizedContent = getSanitizedContent;
    function getSanitizedTasks(tasks) {
      return tasks.map(function(task) {
        return __assign(__assign({}, task), { sanitizedContent: getSanitizedContent(task.content) });
      });
    }
    exports.getSanitizedTasks = getSanitizedTasks;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_colors(), exports);
    __exportStar(require_sanitization(), exports);
  }
});

// node_modules/@doist/todoist-api-typescript/dist/index.js
var require_dist10 = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_TodoistApi(), exports);
    __exportStar(require_restClient(), exports);
    __exportStar(require_authentication(), exports);
    __exportStar(require_types2(), exports);
    __exportStar(require_utils2(), exports);
  }
});

// main.ts
__export(exports, {
  default: () => TodoistLinkPlugin,
  findPreviousHeader: () => findPreviousHeader
});
var import_obsidian = __toModule(require("obsidian"));
var import_todoist_api_typescript = __toModule(require_dist10());
var DEFAULT_SETTINGS = {
  apikey: ""
};
function getCurrentLine(editor, view) {
  const lineNumber = editor.getCursor().line;
  const lineText = editor.getLine(lineNumber);
  return lineText;
}
function prepareTask(line) {
  line = line.trim();
  line = line.replace(/^\W+|\W+$/, "");
  return line;
}
function findPreviousHeader(line, headers) {
  if (headers.length == 0)
    return void 0;
  if (headers[0].position.start.line > line)
    return void 0;
  let index = headers.length - 1;
  while (index >= 0 && headers[index].position.start.line > line)
    index--;
  return headers[index].heading;
}
function urlEncode(line) {
  line = encodeURIComponent(line);
  return line;
}
function createProject(title, deepLink, api) {
  api.addProject({ name: title }).then((project) => {
    api.addComment({
      projectId: project.id,
      content: `[o](${deepLink})`
    }).catch((error) => console.log(error));
    const workspace = this.app.workspace;
    const view = workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view == null) {
      return;
    } else {
      const editor = view.editor;
      const todoistLink = project.url;
      let fileText = editor.getValue();
      const lines = fileText.split("\n");
      const h1Index = lines.findIndex((line) => line.startsWith("#"));
      if (h1Index !== -1) {
        let startRange = {
          line: h1Index,
          ch: lines[h1Index].length
        };
        let endRange = {
          line: h1Index,
          ch: lines[h1Index].length
        };
        editor.replaceRange(`

[Todoist](${todoistLink})`, startRange, endRange);
      } else {
        let startRange = {
          line: 0,
          ch: 0
        };
        let endRange = {
          line: 0,
          ch: 0
        };
        editor.replaceRange(`[Todoist](${todoistLink})

`, startRange, endRange);
      }
    }
  }).catch((error) => console.log(error));
}
function createTask(line, deepLink, api) {
  api.addTask({
    content: `${line}`,
    description: `[o](${deepLink})`
  }).then((task) => {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view == null) {
      return;
    } else {
      const editor = view.editor;
      const currentLine = getCurrentLine(editor, view);
      const firstLetterIndex = currentLine.search(/[a-zA-Z]|[0-9]/);
      const line2 = currentLine.substring(firstLetterIndex, currentLine.length);
      let editorPosition = view.editor.getCursor();
      const lineLength = view.editor.getLine(editorPosition.line).length;
      let startRange = {
        line: editorPosition.line,
        ch: firstLetterIndex
      };
      let endRange = {
        line: editorPosition.line,
        ch: lineLength
      };
      view.editor.replaceRange(`[${line2}](${task.url})`, startRange, endRange);
    }
    console.log(task);
  }).catch((error) => console.log(error));
}
var TodoistLinkPlugin = class extends import_obsidian.Plugin {
  getTodistApi() {
    const api = new import_todoist_api_typescript.TodoistApi(this.settings.apikey);
    return api;
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
      this.onload();
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "create-todoist-project",
        name: "Create Todoist Project",
        editorCallback: (editor, view) => {
          const workspace = this.app.workspace;
          const fileTitle = workspace.getActiveFile();
          if (fileTitle == null) {
            return;
          } else {
            let fileName = fileTitle.name;
            fileName = fileName.replace(/\.md$/, "");
            const obsidianDeepLink = this.app.getObsidianUrl(fileTitle);
            createProject(fileName, obsidianDeepLink, this.getTodistApi());
          }
        }
      });
      this.addCommand({
        id: "create-todoist-task",
        name: "Create Todoist Task",
        editorCallback: (editor, view) => {
          const workspace = this.app.workspace;
          const fileTitle = workspace.getActiveFile();
          if (fileTitle == null) {
            return;
          } else {
            let fileName = urlEncode(fileTitle.name);
            fileName = fileName.replace(/\.md$/, "");
            const obsidianDeepLink = this.app.getObsidianUrl(fileTitle);
            const line = getCurrentLine(editor, view);
            const task = prepareTask(line);
            createTask(task, obsidianDeepLink, this.getTodistApi());
          }
        }
      });
      this.addSettingTab(new TodoistLinkSettingTab(this.app, this));
    });
  }
  onunload() {
  }
};
var TodoistLinkSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("Get your api key and enter it here. From https://todoist.com/app/settings/integrations").addText((text) => text.setPlaceholder("Enter your API Key").setValue(this.plugin.settings.apikey).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.apikey = value;
      yield this.plugin.saveSettings();
    })));
  }
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
